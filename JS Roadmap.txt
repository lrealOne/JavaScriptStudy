Olá, me chamo Luan e estou estudando JavaScript por influenia de amigos.

Tenho conhecimentos em py, java poo, MySQL alem do HTML e CSS.

Espero que as anotações possam te ajudar a prosperar na linguagem, assim como eu.


=> Introdução
     (Operadores Lógicos e matematicos == 028, 103)
     (functions pt01 == 243, 292)
     (functions pt02 == 350, 402)
     (Objects pt01 == 294, 348)
     Constantes     
     (Arrays == 169, 199)
     (Condicionais == 103, 164)  
     (Laços de Repetição (for e while) == 201, 232)

=> DOM - Document Object Model
     -Seletores
     -Maninupular o CSS (através do JS)
     -Eventos
     -array ( map, filter, reduce, sort)
     -Funções

=> Dicas de Projetos
     -Cronometro
     -Lista de Tarefas
     -Calculadora

=> Programação Assíncrona
     -Fetch
     -Promises
     -Async/await

----------------------------------------------------------------

**** Operadores:

- aritméticos;
- atribuição;
- relacional;
- lógicos;
- ternário.


Aritmeticos

5 + 2 = 7
5 - 2 = 3
5 * 2 = 10
5 / 2 = 2.5
5 % 2 = 1 (resto da divisão)
5 * 2 = 25 (potenciação)

========================

Ordem de precedencia 
1= ()
2= **
3= * / %
4= + -

======================

Atribuição
 var n = 3

 n = n+4   | n += 4
 n = n-4   | n -= 4
 n = n*4   | n *= 4
 n = n/2   | n /= 2     
 n = n**2  | n **= 2
 n = n%5   | n %= 5

***Incremento

 n=n+1  |  n++
 n=n-1  |  n--
=======================

Relacionais

 2 >  2   false
 3 <  6   true
 4 >= 7   false
 5 <= 8   true
 6 == 6   true
 7 != 20  true
---------------
identidade

 5 == 5 = t
 5 == '5' = t (iguais, mesmo valor)
 5 === '5' = f (identicos, mesmo valor e tipo)


=======================

Logicos 

! negação      ( not )
&& conjunção   ( and )
|| disjunção   ( or )

=======================

Ternario 

? positivo (true)
! negativo (false)

=======================
sintaxes**

Condicionais 

if, else if and else

if (condição) {
     ação;
} else if (condição) {
     ação;
} else {
     ação;
}
-------------------------------

if simplificado (ternario):

console.log(true ? 'caso positivo' ! 'caso negativo')

exemplo:

var idade = 21;

console.log(idade >= 18 ? 'maior de idade' ! 'menor de idade');

============================================

switch case 

switch(nomeDaVariavel) {
     case 'caso 1':
          console.log('execute caso 1);
          break;
     
     case 'caso 2':
          console.log('executa caso 2');
          break;
     
     default:
          console.log('Caso nenhum dos cases tenha sido encontrado');
          break;
}

multicase:

switch(nomeDaVariavel) {
     case 'caso 1':
     case 'case 2':
     case 'case 3':
          console.log('execute caso 1);
          break;
     
     case 'caso 4':
     case 'caso 5':
     case 'caso 6':
          console.log('executa caso 2');
          break;
     
     default:
          console.log('Caso nenhum dos cases tenha sido encontrado');
          break;
}

========================================

Array (listas)

var nome_do_array = [2, 3, 5, 6, 7, 'pessoa', true]

(nome_do_array[index]) => acessa index definido

(nome_do_array.lenght) => retorna a qtd de itens no array

(nome_do_array.pop) => retorna o ultimo item da lista [-1]

(nome_do_array.slice(primeiro indice, fim do intervalo + 1)) => o pedaço do intervalo 

(nome_do_array.join('caractere')) => separa os itens pelo caractere escolhido

(nome_do_array.push(valor)) => adiciona valor selecionado no fim da lista [-1]

(nome_do_array.includes(valor)) => retorna se o valor esta na lista (true, false)

(nome_do_array.indexof(valor)) => retorna o index do valor, caso não esteja na lista retorna -1

var resultado = array1.concat(array2).concat(array3) => mescla os arrays na ordem

([...array1, array2]) => outra maneira de mesclar

------------------------------------------
|  var jogador = [ 'erre', 2000, 'elfo'];|
|                                        |
|  var [name, nivel, classe] = jogador;  |
------------------------------------------

==========================================

laços de repetição (while & for)

sintaxes 
     while
var contador = 0;
     while(contador < 5){
          console.log(contador);
          ++contador;
     }
}

     for
for (var cont = 0; cont <= 10; cont++){
     console.log(cont)
}

-----------------------------------------

diference between continue and break

break sai do loop

continue ignora o restante do codigo e volta para o loop principal.

-----------------------------------------

outro jeito de utilizar o for é:
array = ['Luan', 1, 2, 4, 32]
for (var variavel of array){
     console.log('for of', variavel)
}

^ assim o for vai transformar a variavel a cada indice que passar por ele.
===========================================

functions pt 01

é usado para armazenar trecho de código que pode ser chamado atraves de seu nome.

function nome_da_function(parametro => opcional) {
     ação;
}

function escrevaMensagem(mensagem){
     console.log(mensagem);
}
escrevaMensagem('mensagem que deseja imprimir');
-----------------------------------

**parametro rest 

function nome(parametro1, parametro 2, ... parametro3){
     ...;
} ==> assim a função exigirá 2 parametros, os demais dados pelo usuario
serao armazenados no array parametro3.

------------------------------------

function autoexecutavel

(function autoExecuta(nome){
     console.log('Executei', nome);
}('Luan'))

------------------------------------

função anonima 

var funcao_anonima = function (a, b){
     return a + b;
};

-------------------------------------

callback functions 

function nomeFuncao(parametro, cb){
    cb(parametro);
}

function nomeParametro(nome){
    console.log(nome, ' é seu nome');
}

nomeFuncao('Luan', nomeParametro);

======================================

Objects pt01

é um tipo de dado que armazena atributos;

const objeto = {
     nome: 'Luan',
     idade: 21, 
     profissao: ti;
}


console.log(objeto.nome) ==> chama a propriedade solicitada.

objeto.novaPropriedade = valor ==> adiciona propriedades ao objeto:

delete objeto.propriedade; ==> deleta a propriedade selecionada.


Objeto.assign({}, nomeObjeto01, nomeObjeto02); 
&&
var novoObjeto = {
     ...nomeObjeto01,
     ...nomeObjeto02
} 
==> as duas maneiras juntam objetos;

=========================================

_getters and _setters 

get é usado para retornar valores quando não se tem args
set é usado para alocar valores

=========================================

var {atributo ou atribito: novo_nome} = nomeObjeto; ==> cria uma variavel baseando-se 
no atributo do objeto.

caso o objeto extenda outro objeto, usamos:

var {nomeObjetoFilho: { atributo }} = nomeObjetoPai;

pode usar o arg default utilizando: 

var {nomeObjetoFilho: { atributo = valor default }} = nomeObjetoPai;

Object.keys(nomeObjeto) => retorna em um array todos os atributos do meu objeto

Object.values(nomeObjeto) => retorna apenas os valores do objeto.

=======================================

Functions part02

this 

representa o escopo do objeto atual 

ex: se chamar this fora do objeto retorna o objeto maior (navegador)
caso esteja em um objeto, retornará sua prop;
-------------------------
this
this aponta para o contexto onde uma função está sendo executada. 
-------------------------
new 
permite escrever funções criadoras de objectos de forma mais simples
-------------------------
call
quando invoca a function diz qual objeto o this estará.

ex call:

function personagem(p1, p2, p3) {
     c.l(this);
}

let luanPersonagem = {
     nome: 'Luan';
}

personagem.call(luanPersonagem, p1, p2, p3);
-------------------------
apply

igual o call, muda somente a maneira de se passar os parametros

ex de apply
personagem.apply(luanPersonagem,[ p1, p2, p3]);
-------------------------
bind 

ele nao invoca a função, ele apenas define os parametros.

utilidade:

let pers = personagem.bind(luanPersonagem, p1, p2, p3);
-------------------------
arrow functions

Em termos simples, uma arrow function é uma forma concisa de escrever uma função em JavaScript

let nomeFuncao = () => {
     retorno;
}

//arrow function nao respondem ao comando call//
-------------------------















*** DOM Document Object Model

- Interface de programação para HTML;
- Temos metodos para acessar a arvore de elementos;
- Fornece uma cópia do HTML;
- Manipulamos eventos pelo DOM para afetar o HTML.
------------------------

 


